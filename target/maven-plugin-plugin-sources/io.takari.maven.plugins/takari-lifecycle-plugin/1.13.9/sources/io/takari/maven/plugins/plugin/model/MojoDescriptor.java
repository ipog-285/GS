// =================== DO NOT EDIT THIS FILE ====================
// Generated by Modello 1.8.3,
// any modifications will be overwritten.
// ==============================================================

package io.takari.maven.plugins.plugin.model;

/**
 * Class MojoDescriptor.
 * 
 * @version $Revision$ $Date$
 */
@SuppressWarnings( "all" )
public class MojoDescriptor
    implements java.io.Serializable, java.lang.Cloneable
{

      //--------------------------/
     //- Class/Member Variables -/
    //--------------------------/

    /**
     * Field superclasses.
     */
    private java.util.List<String> superclasses;

    /**
     * Field goal.
     */
    private String goal;

    /**
     * Field description.
     */
    private String description;

    /**
     * Field since.
     */
    private String since;

    /**
     * Field requiresDependencyResolution.
     */
    private String requiresDependencyResolution;

    /**
     * Field requiresDependencyCollection.
     */
    private String requiresDependencyCollection;

    /**
     * Field requiresDirectInvocation.
     */
    private boolean requiresDirectInvocation = false;

    /**
     * Field requiresProject.
     */
    private boolean requiresProject = false;

    /**
     * Field requiresReports.
     */
    private boolean requiresReports = false;

    /**
     * Field aggregator.
     */
    private boolean aggregator = false;

    /**
     * Field requiresOnline.
     */
    private boolean requiresOnline = false;

    /**
     * Field inheritedByDefault.
     */
    private boolean inheritedByDefault = false;

    /**
     * Field phase.
     */
    private String phase;

    /**
     * Field implementation.
     */
    private String implementation;

    /**
     * Field language.
     */
    private String language;

    /**
     * Field configurator.
     */
    private String configurator;

    /**
     * Field instantiationStrategy.
     */
    private String instantiationStrategy;

    /**
     * Field executionStrategy.
     */
    private String executionStrategy;

    /**
     * Field threadSafe.
     */
    private boolean threadSafe = false;

    /**
     * Field deprecated.
     */
    private String deprecated;

    /**
     * Field parameters.
     */
    private java.util.List<MojoParameter> parameters;

    /**
     * Field requirements.
     */
    private java.util.List<MojoRequirement> requirements;

    /**
     * Field takariBuilder.
     */
    private boolean takariBuilder = false;


      //-----------/
     //- Methods -/
    //-----------/

    /**
     * Method addParameter.
     * 
     * @param mojoParameter
     */
    public void addParameter( MojoParameter mojoParameter )
    {
        getParameters().add( mojoParameter );
    } //-- void addParameter( MojoParameter )

    /**
     * Method addRequirement.
     * 
     * @param mojoRequirement
     */
    public void addRequirement( MojoRequirement mojoRequirement )
    {
        getRequirements().add( mojoRequirement );
    } //-- void addRequirement( MojoRequirement )

    /**
     * Method addSuperclasse.
     * 
     * @param string
     */
    public void addSuperclasse( String string )
    {
        getSuperclasses().add( string );
    } //-- void addSuperclasse( String )

    /**
     * Method clone.
     * 
     * @return MojoDescriptor
     */
    public MojoDescriptor clone()
    {
        try
        {
            MojoDescriptor copy = (MojoDescriptor) super.clone();

            if ( this.superclasses != null )
            {
                copy.superclasses = new java.util.ArrayList<String>();
                copy.superclasses.addAll( this.superclasses );
            }

            if ( this.parameters != null )
            {
                copy.parameters = new java.util.ArrayList<MojoParameter>();
                for ( MojoParameter item : this.parameters )
                {
                    copy.parameters.add( ( (MojoParameter) item).clone() );
                }
            }

            if ( this.requirements != null )
            {
                copy.requirements = new java.util.ArrayList<MojoRequirement>();
                for ( MojoRequirement item : this.requirements )
                {
                    copy.requirements.add( ( (MojoRequirement) item).clone() );
                }
            }

            return copy;
        }
        catch ( java.lang.Exception ex )
        {
            throw (java.lang.RuntimeException) new java.lang.UnsupportedOperationException( getClass().getName()
                + " does not support clone()" ).initCause( ex );
        }
    } //-- MojoDescriptor clone()

    /**
     * Get the configurator field.
     * 
     * @return String
     */
    public String getConfigurator()
    {
        return this.configurator;
    } //-- String getConfigurator()

    /**
     * Get the deprecated field.
     * 
     * @return String
     */
    public String getDeprecated()
    {
        return this.deprecated;
    } //-- String getDeprecated()

    /**
     * Get the description field.
     * 
     * @return String
     */
    public String getDescription()
    {
        return this.description;
    } //-- String getDescription()

    /**
     * Get the executionStrategy field.
     * 
     * @return String
     */
    public String getExecutionStrategy()
    {
        return this.executionStrategy;
    } //-- String getExecutionStrategy()

    /**
     * Get the goal field.
     * 
     * @return String
     */
    public String getGoal()
    {
        return this.goal;
    } //-- String getGoal()

    /**
     * Get the implementation field.
     * 
     * @return String
     */
    public String getImplementation()
    {
        return this.implementation;
    } //-- String getImplementation()

    /**
     * Get the instantiationStrategy field.
     * 
     * @return String
     */
    public String getInstantiationStrategy()
    {
        return this.instantiationStrategy;
    } //-- String getInstantiationStrategy()

    /**
     * Get the language field.
     * 
     * @return String
     */
    public String getLanguage()
    {
        return this.language;
    } //-- String getLanguage()

    /**
     * Method getParameters.
     * 
     * @return List
     */
    public java.util.List<MojoParameter> getParameters()
    {
        if ( this.parameters == null )
        {
            this.parameters = new java.util.ArrayList<MojoParameter>();
        }

        return this.parameters;
    } //-- java.util.List<MojoParameter> getParameters()

    /**
     * Get the phase field.
     * 
     * @return String
     */
    public String getPhase()
    {
        return this.phase;
    } //-- String getPhase()

    /**
     * Method getRequirements.
     * 
     * @return List
     */
    public java.util.List<MojoRequirement> getRequirements()
    {
        if ( this.requirements == null )
        {
            this.requirements = new java.util.ArrayList<MojoRequirement>();
        }

        return this.requirements;
    } //-- java.util.List<MojoRequirement> getRequirements()

    /**
     * Get the requiresDependencyCollection field.
     * 
     * @return String
     */
    public String getRequiresDependencyCollection()
    {
        return this.requiresDependencyCollection;
    } //-- String getRequiresDependencyCollection()

    /**
     * Get the requiresDependencyResolution field.
     * 
     * @return String
     */
    public String getRequiresDependencyResolution()
    {
        return this.requiresDependencyResolution;
    } //-- String getRequiresDependencyResolution()

    /**
     * Get the since field.
     * 
     * @return String
     */
    public String getSince()
    {
        return this.since;
    } //-- String getSince()

    /**
     * Method getSuperclasses.
     * 
     * @return List
     */
    public java.util.List<String> getSuperclasses()
    {
        if ( this.superclasses == null )
        {
            this.superclasses = new java.util.ArrayList<String>();
        }

        return this.superclasses;
    } //-- java.util.List<String> getSuperclasses()

    /**
     * Get the aggregator field.
     * 
     * @return boolean
     */
    public boolean isAggregator()
    {
        return this.aggregator;
    } //-- boolean isAggregator()

    /**
     * Get the inheritedByDefault field.
     * 
     * @return boolean
     */
    public boolean isInheritedByDefault()
    {
        return this.inheritedByDefault;
    } //-- boolean isInheritedByDefault()

    /**
     * Get the requiresDirectInvocation field.
     * 
     * @return boolean
     */
    public boolean isRequiresDirectInvocation()
    {
        return this.requiresDirectInvocation;
    } //-- boolean isRequiresDirectInvocation()

    /**
     * Get the requiresOnline field.
     * 
     * @return boolean
     */
    public boolean isRequiresOnline()
    {
        return this.requiresOnline;
    } //-- boolean isRequiresOnline()

    /**
     * Get the requiresProject field.
     * 
     * @return boolean
     */
    public boolean isRequiresProject()
    {
        return this.requiresProject;
    } //-- boolean isRequiresProject()

    /**
     * Get the requiresReports field.
     * 
     * @return boolean
     */
    public boolean isRequiresReports()
    {
        return this.requiresReports;
    } //-- boolean isRequiresReports()

    /**
     * Get the takariBuilder field.
     * 
     * @return boolean
     */
    public boolean isTakariBuilder()
    {
        return this.takariBuilder;
    } //-- boolean isTakariBuilder()

    /**
     * Get the threadSafe field.
     * 
     * @return boolean
     */
    public boolean isThreadSafe()
    {
        return this.threadSafe;
    } //-- boolean isThreadSafe()

    /**
     * Method removeParameter.
     * 
     * @param mojoParameter
     */
    public void removeParameter( MojoParameter mojoParameter )
    {
        getParameters().remove( mojoParameter );
    } //-- void removeParameter( MojoParameter )

    /**
     * Method removeRequirement.
     * 
     * @param mojoRequirement
     */
    public void removeRequirement( MojoRequirement mojoRequirement )
    {
        getRequirements().remove( mojoRequirement );
    } //-- void removeRequirement( MojoRequirement )

    /**
     * Method removeSuperclasse.
     * 
     * @param string
     */
    public void removeSuperclasse( String string )
    {
        getSuperclasses().remove( string );
    } //-- void removeSuperclasse( String )

    /**
     * Set the aggregator field.
     * 
     * @param aggregator
     */
    public void setAggregator( boolean aggregator )
    {
        this.aggregator = aggregator;
    } //-- void setAggregator( boolean )

    /**
     * Set the configurator field.
     * 
     * @param configurator
     */
    public void setConfigurator( String configurator )
    {
        this.configurator = configurator;
    } //-- void setConfigurator( String )

    /**
     * Set the deprecated field.
     * 
     * @param deprecated
     */
    public void setDeprecated( String deprecated )
    {
        this.deprecated = deprecated;
    } //-- void setDeprecated( String )

    /**
     * Set the description field.
     * 
     * @param description
     */
    public void setDescription( String description )
    {
        this.description = description;
    } //-- void setDescription( String )

    /**
     * Set the executionStrategy field.
     * 
     * @param executionStrategy
     */
    public void setExecutionStrategy( String executionStrategy )
    {
        this.executionStrategy = executionStrategy;
    } //-- void setExecutionStrategy( String )

    /**
     * Set the goal field.
     * 
     * @param goal
     */
    public void setGoal( String goal )
    {
        this.goal = goal;
    } //-- void setGoal( String )

    /**
     * Set the implementation field.
     * 
     * @param implementation
     */
    public void setImplementation( String implementation )
    {
        this.implementation = implementation;
    } //-- void setImplementation( String )

    /**
     * Set the inheritedByDefault field.
     * 
     * @param inheritedByDefault
     */
    public void setInheritedByDefault( boolean inheritedByDefault )
    {
        this.inheritedByDefault = inheritedByDefault;
    } //-- void setInheritedByDefault( boolean )

    /**
     * Set the instantiationStrategy field.
     * 
     * @param instantiationStrategy
     */
    public void setInstantiationStrategy( String instantiationStrategy )
    {
        this.instantiationStrategy = instantiationStrategy;
    } //-- void setInstantiationStrategy( String )

    /**
     * Set the language field.
     * 
     * @param language
     */
    public void setLanguage( String language )
    {
        this.language = language;
    } //-- void setLanguage( String )

    /**
     * Set the parameters field.
     * 
     * @param parameters
     */
    public void setParameters( java.util.List<MojoParameter> parameters )
    {
        this.parameters = parameters;
    } //-- void setParameters( java.util.List )

    /**
     * Set the phase field.
     * 
     * @param phase
     */
    public void setPhase( String phase )
    {
        this.phase = phase;
    } //-- void setPhase( String )

    /**
     * Set the requirements field.
     * 
     * @param requirements
     */
    public void setRequirements( java.util.List<MojoRequirement> requirements )
    {
        this.requirements = requirements;
    } //-- void setRequirements( java.util.List )

    /**
     * Set the requiresDependencyCollection field.
     * 
     * @param requiresDependencyCollection
     */
    public void setRequiresDependencyCollection( String requiresDependencyCollection )
    {
        this.requiresDependencyCollection = requiresDependencyCollection;
    } //-- void setRequiresDependencyCollection( String )

    /**
     * Set the requiresDependencyResolution field.
     * 
     * @param requiresDependencyResolution
     */
    public void setRequiresDependencyResolution( String requiresDependencyResolution )
    {
        this.requiresDependencyResolution = requiresDependencyResolution;
    } //-- void setRequiresDependencyResolution( String )

    /**
     * Set the requiresDirectInvocation field.
     * 
     * @param requiresDirectInvocation
     */
    public void setRequiresDirectInvocation( boolean requiresDirectInvocation )
    {
        this.requiresDirectInvocation = requiresDirectInvocation;
    } //-- void setRequiresDirectInvocation( boolean )

    /**
     * Set the requiresOnline field.
     * 
     * @param requiresOnline
     */
    public void setRequiresOnline( boolean requiresOnline )
    {
        this.requiresOnline = requiresOnline;
    } //-- void setRequiresOnline( boolean )

    /**
     * Set the requiresProject field.
     * 
     * @param requiresProject
     */
    public void setRequiresProject( boolean requiresProject )
    {
        this.requiresProject = requiresProject;
    } //-- void setRequiresProject( boolean )

    /**
     * Set the requiresReports field.
     * 
     * @param requiresReports
     */
    public void setRequiresReports( boolean requiresReports )
    {
        this.requiresReports = requiresReports;
    } //-- void setRequiresReports( boolean )

    /**
     * Set the since field.
     * 
     * @param since
     */
    public void setSince( String since )
    {
        this.since = since;
    } //-- void setSince( String )

    /**
     * Set the superclasses field.
     * 
     * @param superclasses
     */
    public void setSuperclasses( java.util.List<String> superclasses )
    {
        this.superclasses = superclasses;
    } //-- void setSuperclasses( java.util.List )

    /**
     * Set the takariBuilder field.
     * 
     * @param takariBuilder
     */
    public void setTakariBuilder( boolean takariBuilder )
    {
        this.takariBuilder = takariBuilder;
    } //-- void setTakariBuilder( boolean )

    /**
     * Set the threadSafe field.
     * 
     * @param threadSafe
     */
    public void setThreadSafe( boolean threadSafe )
    {
        this.threadSafe = threadSafe;
    } //-- void setThreadSafe( boolean )

}
