// =================== DO NOT EDIT THIS FILE ====================
// Generated by Modello 1.8.3,
// any modifications will be overwritten.
// ==============================================================

package io.takari.maven.plugins.plugin.model.io.xpp3;

  //---------------------------------/
 //- Imported classes and packages -/
//---------------------------------/

import io.takari.maven.plugins.plugin.model.MojoDescriptor;
import io.takari.maven.plugins.plugin.model.MojoParameter;
import io.takari.maven.plugins.plugin.model.MojoRequirement;
import io.takari.maven.plugins.plugin.model.PluginDependency;
import io.takari.maven.plugins.plugin.model.PluginDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.Reader;
import java.text.DateFormat;
import org.codehaus.plexus.util.ReaderFactory;
import org.codehaus.plexus.util.xml.pull.EntityReplacementMap;
import org.codehaus.plexus.util.xml.pull.MXParser;
import org.codehaus.plexus.util.xml.pull.XmlPullParser;
import org.codehaus.plexus.util.xml.pull.XmlPullParserException;

/**
 * Class PluginDescriptorXpp3Reader.
 * 
 * @version $Revision$ $Date$
 */
@SuppressWarnings( "all" )
public class PluginDescriptorXpp3Reader
{

      //--------------------------/
     //- Class/Member Variables -/
    //--------------------------/

    /**
     * If set the parser will be loaded with all single characters
     * from the XHTML specification.
     * The entities used:
     * <ul>
     * <li>http://www.w3.org/TR/xhtml1/DTD/xhtml-lat1.ent</li>
     * <li>http://www.w3.org/TR/xhtml1/DTD/xhtml-special.ent</li>
     * <li>http://www.w3.org/TR/xhtml1/DTD/xhtml-symbol.ent</li>
     * </ul>
     */
    private boolean addDefaultEntities = true;

    /**
     * Field contentTransformer.
     */
    public final ContentTransformer contentTransformer;


      //----------------/
     //- Constructors -/
    //----------------/

    public PluginDescriptorXpp3Reader()
    {
        this( new ContentTransformer()
        {
            public String transform( String source, String fieldName )
            {
                return source;
            }
        } );
    } //-- io.takari.maven.plugins.plugin.model.io.xpp3.PluginDescriptorXpp3Reader()

    public PluginDescriptorXpp3Reader(ContentTransformer contentTransformer)
    {
        this.contentTransformer = contentTransformer;
    } //-- io.takari.maven.plugins.plugin.model.io.xpp3.PluginDescriptorXpp3Reader(ContentTransformer)


      //-----------/
     //- Methods -/
    //-----------/

    /**
     * Method checkFieldWithDuplicate.
     * 
     * @param parser
     * @param parsed
     * @param alias
     * @param tagName
     * @throws XmlPullParserException
     * @return boolean
     */
    private boolean checkFieldWithDuplicate( XmlPullParser parser, String tagName, String alias, java.util.Set parsed )
        throws XmlPullParserException
    {
        if ( !( parser.getName().equals( tagName ) || parser.getName().equals( alias ) ) )
        {
            return false;
        }
        if ( !parsed.add( tagName ) )
        {
            throw new XmlPullParserException( "Duplicated tag: '" + tagName + "'", parser, null );
        }
        return true;
    } //-- boolean checkFieldWithDuplicate( XmlPullParser, String, String, java.util.Set )

    /**
     * Method checkUnknownAttribute.
     * 
     * @param parser
     * @param strict
     * @param tagName
     * @param attribute
     * @throws XmlPullParserException
     * @throws IOException
     */
    private void checkUnknownAttribute( XmlPullParser parser, String attribute, String tagName, boolean strict )
        throws XmlPullParserException, IOException
    {
        // strictXmlAttributes = true for model: if strict == true, not only elements are checked but attributes too
        if ( strict )
        {
            throw new XmlPullParserException( "Unknown attribute '" + attribute + "' for tag '" + tagName + "'", parser, null );
        }
    } //-- void checkUnknownAttribute( XmlPullParser, String, String, boolean )

    /**
     * Method checkUnknownElement.
     * 
     * @param parser
     * @param strict
     * @throws XmlPullParserException
     * @throws IOException
     */
    private void checkUnknownElement( XmlPullParser parser, boolean strict )
        throws XmlPullParserException, IOException
    {
        if ( strict )
        {
            throw new XmlPullParserException( "Unrecognised tag: '" + parser.getName() + "'", parser, null );
        }

        for ( int unrecognizedTagCount = 1; unrecognizedTagCount > 0; )
        {
            int eventType = parser.next();
            if ( eventType == XmlPullParser.START_TAG )
            {
                unrecognizedTagCount++;
            }
            else if ( eventType == XmlPullParser.END_TAG )
            {
                unrecognizedTagCount--;
            }
        }
    } //-- void checkUnknownElement( XmlPullParser, boolean )

    /**
     * Returns the state of the "add default entities" flag.
     * 
     * @return boolean
     */
    public boolean getAddDefaultEntities()
    {
        return addDefaultEntities;
    } //-- boolean getAddDefaultEntities()

    /**
     * Method getBooleanValue.
     * 
     * @param s
     * @param parser
     * @param attribute
     * @throws XmlPullParserException
     * @return boolean
     */
    private boolean getBooleanValue( String s, String attribute, XmlPullParser parser )
        throws XmlPullParserException
    {
        return getBooleanValue( s, attribute, parser, null );
    } //-- boolean getBooleanValue( String, String, XmlPullParser )

    /**
     * Method getBooleanValue.
     * 
     * @param s
     * @param defaultValue
     * @param parser
     * @param attribute
     * @throws XmlPullParserException
     * @return boolean
     */
    private boolean getBooleanValue( String s, String attribute, XmlPullParser parser, String defaultValue )
        throws XmlPullParserException
    {
        if ( s != null && s.length() != 0 )
        {
            return Boolean.valueOf( s ).booleanValue();
        }
        if ( defaultValue != null )
        {
            return Boolean.valueOf( defaultValue ).booleanValue();
        }
        return false;
    } //-- boolean getBooleanValue( String, String, XmlPullParser, String )

    /**
     * Method getByteValue.
     * 
     * @param s
     * @param strict
     * @param parser
     * @param attribute
     * @throws XmlPullParserException
     * @return byte
     */
    private byte getByteValue( String s, String attribute, XmlPullParser parser, boolean strict )
        throws XmlPullParserException
    {
        if ( s != null )
        {
            try
            {
                return Byte.valueOf( s ).byteValue();
            }
            catch ( NumberFormatException nfe )
            {
                if ( strict )
                {
                    throw new XmlPullParserException( "Unable to parse element '" + attribute + "', must be a byte", parser, nfe );
                }
            }
        }
        return 0;
    } //-- byte getByteValue( String, String, XmlPullParser, boolean )

    /**
     * Method getCharacterValue.
     * 
     * @param s
     * @param parser
     * @param attribute
     * @throws XmlPullParserException
     * @return char
     */
    private char getCharacterValue( String s, String attribute, XmlPullParser parser )
        throws XmlPullParserException
    {
        if ( s != null )
        {
            return s.charAt( 0 );
        }
        return 0;
    } //-- char getCharacterValue( String, String, XmlPullParser )

    /**
     * Method getDateValue.
     * 
     * @param s
     * @param parser
     * @param attribute
     * @throws XmlPullParserException
     * @return Date
     */
    private java.util.Date getDateValue( String s, String attribute, XmlPullParser parser )
        throws XmlPullParserException
    {
        return getDateValue( s, attribute, null, parser );
    } //-- java.util.Date getDateValue( String, String, XmlPullParser )

    /**
     * Method getDateValue.
     * 
     * @param s
     * @param parser
     * @param dateFormat
     * @param attribute
     * @throws XmlPullParserException
     * @return Date
     */
    private java.util.Date getDateValue( String s, String attribute, String dateFormat, XmlPullParser parser )
        throws XmlPullParserException
    {
        if ( s != null )
        {
            String effectiveDateFormat = dateFormat;
            if ( dateFormat == null )
            {
                effectiveDateFormat = "yyyy-MM-dd'T'HH:mm:ss.SSS";
            }
            if ( "long".equals( effectiveDateFormat ) )
            {
                try
                {
                    return new java.util.Date( Long.parseLong( s ) );
                }
                catch ( NumberFormatException e )
                {
                    throw new XmlPullParserException( e.getMessage(), parser, e );
                }
            }
            else
            {
                try
                {
                    DateFormat dateParser = new java.text.SimpleDateFormat( effectiveDateFormat, java.util.Locale.US );
                    return dateParser.parse( s );
                }
                catch ( java.text.ParseException e )
                {
                    throw new XmlPullParserException( e.getMessage(), parser, e );
                }
            }
        }
        return null;
    } //-- java.util.Date getDateValue( String, String, String, XmlPullParser )

    /**
     * Method getDoubleValue.
     * 
     * @param s
     * @param strict
     * @param parser
     * @param attribute
     * @throws XmlPullParserException
     * @return double
     */
    private double getDoubleValue( String s, String attribute, XmlPullParser parser, boolean strict )
        throws XmlPullParserException
    {
        if ( s != null )
        {
            try
            {
                return Double.valueOf( s ).doubleValue();
            }
            catch ( NumberFormatException nfe )
            {
                if ( strict )
                {
                    throw new XmlPullParserException( "Unable to parse element '" + attribute + "', must be a floating point number", parser, nfe );
                }
            }
        }
        return 0;
    } //-- double getDoubleValue( String, String, XmlPullParser, boolean )

    /**
     * Method getFloatValue.
     * 
     * @param s
     * @param strict
     * @param parser
     * @param attribute
     * @throws XmlPullParserException
     * @return float
     */
    private float getFloatValue( String s, String attribute, XmlPullParser parser, boolean strict )
        throws XmlPullParserException
    {
        if ( s != null )
        {
            try
            {
                return Float.valueOf( s ).floatValue();
            }
            catch ( NumberFormatException nfe )
            {
                if ( strict )
                {
                    throw new XmlPullParserException( "Unable to parse element '" + attribute + "', must be a floating point number", parser, nfe );
                }
            }
        }
        return 0;
    } //-- float getFloatValue( String, String, XmlPullParser, boolean )

    /**
     * Method getIntegerValue.
     * 
     * @param s
     * @param strict
     * @param parser
     * @param attribute
     * @throws XmlPullParserException
     * @return int
     */
    private int getIntegerValue( String s, String attribute, XmlPullParser parser, boolean strict )
        throws XmlPullParserException
    {
        if ( s != null )
        {
            try
            {
                return Integer.valueOf( s ).intValue();
            }
            catch ( NumberFormatException nfe )
            {
                if ( strict )
                {
                    throw new XmlPullParserException( "Unable to parse element '" + attribute + "', must be an integer", parser, nfe );
                }
            }
        }
        return 0;
    } //-- int getIntegerValue( String, String, XmlPullParser, boolean )

    /**
     * Method getLongValue.
     * 
     * @param s
     * @param strict
     * @param parser
     * @param attribute
     * @throws XmlPullParserException
     * @return long
     */
    private long getLongValue( String s, String attribute, XmlPullParser parser, boolean strict )
        throws XmlPullParserException
    {
        if ( s != null )
        {
            try
            {
                return Long.valueOf( s ).longValue();
            }
            catch ( NumberFormatException nfe )
            {
                if ( strict )
                {
                    throw new XmlPullParserException( "Unable to parse element '" + attribute + "', must be a long integer", parser, nfe );
                }
            }
        }
        return 0;
    } //-- long getLongValue( String, String, XmlPullParser, boolean )

    /**
     * Method getRequiredAttributeValue.
     * 
     * @param s
     * @param strict
     * @param parser
     * @param attribute
     * @throws XmlPullParserException
     * @return String
     */
    private String getRequiredAttributeValue( String s, String attribute, XmlPullParser parser, boolean strict )
        throws XmlPullParserException
    {
        if ( s == null )
        {
            if ( strict )
            {
                throw new XmlPullParserException( "Missing required value for attribute '" + attribute + "'", parser, null );
            }
        }
        return s;
    } //-- String getRequiredAttributeValue( String, String, XmlPullParser, boolean )

    /**
     * Method getShortValue.
     * 
     * @param s
     * @param strict
     * @param parser
     * @param attribute
     * @throws XmlPullParserException
     * @return short
     */
    private short getShortValue( String s, String attribute, XmlPullParser parser, boolean strict )
        throws XmlPullParserException
    {
        if ( s != null )
        {
            try
            {
                return Short.valueOf( s ).shortValue();
            }
            catch ( NumberFormatException nfe )
            {
                if ( strict )
                {
                    throw new XmlPullParserException( "Unable to parse element '" + attribute + "', must be a short integer", parser, nfe );
                }
            }
        }
        return 0;
    } //-- short getShortValue( String, String, XmlPullParser, boolean )

    /**
     * Method getTrimmedValue.
     * 
     * @param s
     * @return String
     */
    private String getTrimmedValue( String s )
    {
        if ( s != null )
        {
            s = s.trim();
        }
        return s;
    } //-- String getTrimmedValue( String )

    /**
     * Method interpolatedTrimmed.
     * 
     * @param value
     * @param context
     * @return String
     */
    private String interpolatedTrimmed( String value, String context )
    {
        return getTrimmedValue( contentTransformer.transform( value, context ) );
    } //-- String interpolatedTrimmed( String, String )

    /**
     * Method nextTag.
     * 
     * @param parser
     * @throws IOException
     * @throws XmlPullParserException
     * @return int
     */
    private int nextTag( XmlPullParser parser )
        throws IOException, XmlPullParserException
    {
        int eventType = parser.next();
        if ( eventType == XmlPullParser.TEXT )
        {
            eventType = parser.next();
        }
        if ( eventType != XmlPullParser.START_TAG && eventType != XmlPullParser.END_TAG )
        {
            throw new XmlPullParserException( "expected START_TAG or END_TAG not " + XmlPullParser.TYPES[eventType], parser, null );
        }
        return eventType;
    } //-- int nextTag( XmlPullParser )

    /**
     * @see ReaderFactory#newXmlReader
     * 
     * @param reader
     * @param strict
     * @throws IOException
     * @throws XmlPullParserException
     * @return PluginDescriptor
     */
    public PluginDescriptor read( Reader reader, boolean strict )
        throws IOException, XmlPullParserException
    {
        XmlPullParser parser = addDefaultEntities ? new MXParser(EntityReplacementMap.defaultEntityReplacementMap) : new MXParser( );

        parser.setInput( reader );


        return read( parser, strict );
    } //-- PluginDescriptor read( Reader, boolean )

    /**
     * @see ReaderFactory#newXmlReader
     * 
     * @param reader
     * @throws IOException
     * @throws XmlPullParserException
     * @return PluginDescriptor
     */
    public PluginDescriptor read( Reader reader )
        throws IOException, XmlPullParserException
    {
        return read( reader, true );
    } //-- PluginDescriptor read( Reader )

    /**
     * Method read.
     * 
     * @param in
     * @param strict
     * @throws IOException
     * @throws XmlPullParserException
     * @return PluginDescriptor
     */
    public PluginDescriptor read( InputStream in, boolean strict )
        throws IOException, XmlPullParserException
    {
        return read( ReaderFactory.newXmlReader( in ), strict );
    } //-- PluginDescriptor read( InputStream, boolean )

    /**
     * Method read.
     * 
     * @param in
     * @throws IOException
     * @throws XmlPullParserException
     * @return PluginDescriptor
     */
    public PluginDescriptor read( InputStream in )
        throws IOException, XmlPullParserException
    {
        return read( ReaderFactory.newXmlReader( in ) );
    } //-- PluginDescriptor read( InputStream )

    /**
     * Method parseMojoDescriptor.
     * 
     * @param parser
     * @param strict
     * @throws IOException
     * @throws XmlPullParserException
     * @return MojoDescriptor
     */
    private MojoDescriptor parseMojoDescriptor( XmlPullParser parser, boolean strict )
        throws IOException, XmlPullParserException
    {
        String tagName = parser.getName();
        MojoDescriptor mojoDescriptor = new MojoDescriptor();
        for ( int i = parser.getAttributeCount() - 1; i >= 0; i-- )
        {
            String name = parser.getAttributeName( i );
            String value = parser.getAttributeValue( i );

            if ( name.indexOf( ':' ) >= 0 )
            {
                // just ignore attributes with non-default namespace (for example: xmlns:xsi)
            }
            else
            {
                checkUnknownAttribute( parser, name, tagName, strict );
            }
        }
        java.util.Set parsed = new java.util.HashSet();
        while ( ( strict ? parser.nextTag() : nextTag( parser ) ) == XmlPullParser.START_TAG )
        {
            if ( checkFieldWithDuplicate( parser, "superclasses", null, parsed ) )
            {
                java.util.List superclasses = new java.util.ArrayList/*<String>*/();
                mojoDescriptor.setSuperclasses( superclasses );
                while ( parser.nextTag() == XmlPullParser.START_TAG )
                {
                    if ( "superclasse".equals( parser.getName() ) )
                    {
                        superclasses.add( interpolatedTrimmed( parser.nextText(), "superclasses" ) );
                    }
                    else
                    {
                        checkUnknownElement( parser, strict );
                    }
                }
            }
            else if ( checkFieldWithDuplicate( parser, "goal", null, parsed ) )
            {
                mojoDescriptor.setGoal( interpolatedTrimmed( parser.nextText(), "goal" ) );
            }
            else if ( checkFieldWithDuplicate( parser, "description", null, parsed ) )
            {
                mojoDescriptor.setDescription( interpolatedTrimmed( parser.nextText(), "description" ) );
            }
            else if ( checkFieldWithDuplicate( parser, "since", null, parsed ) )
            {
                mojoDescriptor.setSince( interpolatedTrimmed( parser.nextText(), "since" ) );
            }
            else if ( checkFieldWithDuplicate( parser, "requiresDependencyResolution", null, parsed ) )
            {
                mojoDescriptor.setRequiresDependencyResolution( interpolatedTrimmed( parser.nextText(), "requiresDependencyResolution" ) );
            }
            else if ( checkFieldWithDuplicate( parser, "requiresDependencyCollection", null, parsed ) )
            {
                mojoDescriptor.setRequiresDependencyCollection( interpolatedTrimmed( parser.nextText(), "requiresDependencyCollection" ) );
            }
            else if ( checkFieldWithDuplicate( parser, "requiresDirectInvocation", null, parsed ) )
            {
                mojoDescriptor.setRequiresDirectInvocation( getBooleanValue( interpolatedTrimmed( parser.nextText(), "requiresDirectInvocation" ), "requiresDirectInvocation", parser, "false" ) );
            }
            else if ( checkFieldWithDuplicate( parser, "requiresProject", null, parsed ) )
            {
                mojoDescriptor.setRequiresProject( getBooleanValue( interpolatedTrimmed( parser.nextText(), "requiresProject" ), "requiresProject", parser, "false" ) );
            }
            else if ( checkFieldWithDuplicate( parser, "requiresReports", null, parsed ) )
            {
                mojoDescriptor.setRequiresReports( getBooleanValue( interpolatedTrimmed( parser.nextText(), "requiresReports" ), "requiresReports", parser, "false" ) );
            }
            else if ( checkFieldWithDuplicate( parser, "aggregator", null, parsed ) )
            {
                mojoDescriptor.setAggregator( getBooleanValue( interpolatedTrimmed( parser.nextText(), "aggregator" ), "aggregator", parser, "false" ) );
            }
            else if ( checkFieldWithDuplicate( parser, "requiresOnline", null, parsed ) )
            {
                mojoDescriptor.setRequiresOnline( getBooleanValue( interpolatedTrimmed( parser.nextText(), "requiresOnline" ), "requiresOnline", parser, "false" ) );
            }
            else if ( checkFieldWithDuplicate( parser, "inheritedByDefault", null, parsed ) )
            {
                mojoDescriptor.setInheritedByDefault( getBooleanValue( interpolatedTrimmed( parser.nextText(), "inheritedByDefault" ), "inheritedByDefault", parser, "false" ) );
            }
            else if ( checkFieldWithDuplicate( parser, "phase", null, parsed ) )
            {
                mojoDescriptor.setPhase( interpolatedTrimmed( parser.nextText(), "phase" ) );
            }
            else if ( checkFieldWithDuplicate( parser, "implementation", null, parsed ) )
            {
                mojoDescriptor.setImplementation( interpolatedTrimmed( parser.nextText(), "implementation" ) );
            }
            else if ( checkFieldWithDuplicate( parser, "language", null, parsed ) )
            {
                mojoDescriptor.setLanguage( interpolatedTrimmed( parser.nextText(), "language" ) );
            }
            else if ( checkFieldWithDuplicate( parser, "configurator", null, parsed ) )
            {
                mojoDescriptor.setConfigurator( interpolatedTrimmed( parser.nextText(), "configurator" ) );
            }
            else if ( checkFieldWithDuplicate( parser, "instantiationStrategy", null, parsed ) )
            {
                mojoDescriptor.setInstantiationStrategy( interpolatedTrimmed( parser.nextText(), "instantiationStrategy" ) );
            }
            else if ( checkFieldWithDuplicate( parser, "executionStrategy", null, parsed ) )
            {
                mojoDescriptor.setExecutionStrategy( interpolatedTrimmed( parser.nextText(), "executionStrategy" ) );
            }
            else if ( checkFieldWithDuplicate( parser, "threadSafe", null, parsed ) )
            {
                mojoDescriptor.setThreadSafe( getBooleanValue( interpolatedTrimmed( parser.nextText(), "threadSafe" ), "threadSafe", parser, "false" ) );
            }
            else if ( checkFieldWithDuplicate( parser, "deprecated", null, parsed ) )
            {
                mojoDescriptor.setDeprecated( interpolatedTrimmed( parser.nextText(), "deprecated" ) );
            }
            else if ( checkFieldWithDuplicate( parser, "parameters", null, parsed ) )
            {
                java.util.List parameters = new java.util.ArrayList/*<MojoParameter>*/();
                mojoDescriptor.setParameters( parameters );
                while ( parser.nextTag() == XmlPullParser.START_TAG )
                {
                    if ( "parameter".equals( parser.getName() ) )
                    {
                        parameters.add( parseMojoParameter( parser, strict ) );
                    }
                    else
                    {
                        checkUnknownElement( parser, strict );
                    }
                }
            }
            else if ( checkFieldWithDuplicate( parser, "requirements", null, parsed ) )
            {
                java.util.List requirements = new java.util.ArrayList/*<MojoRequirement>*/();
                mojoDescriptor.setRequirements( requirements );
                while ( parser.nextTag() == XmlPullParser.START_TAG )
                {
                    if ( "requirement".equals( parser.getName() ) )
                    {
                        requirements.add( parseMojoRequirement( parser, strict ) );
                    }
                    else
                    {
                        checkUnknownElement( parser, strict );
                    }
                }
            }
            else if ( checkFieldWithDuplicate( parser, "takariBuilder", null, parsed ) )
            {
                mojoDescriptor.setTakariBuilder( getBooleanValue( interpolatedTrimmed( parser.nextText(), "takariBuilder" ), "takariBuilder", parser, "false" ) );
            }
            else
            {
                checkUnknownElement( parser, strict );
            }
        }
        return mojoDescriptor;
    } //-- MojoDescriptor parseMojoDescriptor( XmlPullParser, boolean )

    /**
     * Method parseMojoParameter.
     * 
     * @param parser
     * @param strict
     * @throws IOException
     * @throws XmlPullParserException
     * @return MojoParameter
     */
    private MojoParameter parseMojoParameter( XmlPullParser parser, boolean strict )
        throws IOException, XmlPullParserException
    {
        String tagName = parser.getName();
        MojoParameter mojoParameter = new MojoParameter();
        for ( int i = parser.getAttributeCount() - 1; i >= 0; i-- )
        {
            String name = parser.getAttributeName( i );
            String value = parser.getAttributeValue( i );

            if ( name.indexOf( ':' ) >= 0 )
            {
                // just ignore attributes with non-default namespace (for example: xmlns:xsi)
            }
            else
            {
                checkUnknownAttribute( parser, name, tagName, strict );
            }
        }
        java.util.Set parsed = new java.util.HashSet();
        while ( ( strict ? parser.nextTag() : nextTag( parser ) ) == XmlPullParser.START_TAG )
        {
            if ( checkFieldWithDuplicate( parser, "name", null, parsed ) )
            {
                mojoParameter.setName( interpolatedTrimmed( parser.nextText(), "name" ) );
            }
            else if ( checkFieldWithDuplicate( parser, "alias", null, parsed ) )
            {
                mojoParameter.setAlias( interpolatedTrimmed( parser.nextText(), "alias" ) );
            }
            else if ( checkFieldWithDuplicate( parser, "type", null, parsed ) )
            {
                mojoParameter.setType( interpolatedTrimmed( parser.nextText(), "type" ) );
            }
            else if ( checkFieldWithDuplicate( parser, "required", null, parsed ) )
            {
                mojoParameter.setRequired( getBooleanValue( interpolatedTrimmed( parser.nextText(), "required" ), "required", parser, "false" ) );
            }
            else if ( checkFieldWithDuplicate( parser, "editable", null, parsed ) )
            {
                mojoParameter.setEditable( getBooleanValue( interpolatedTrimmed( parser.nextText(), "editable" ), "editable", parser, "false" ) );
            }
            else if ( checkFieldWithDuplicate( parser, "description", null, parsed ) )
            {
                mojoParameter.setDescription( interpolatedTrimmed( parser.nextText(), "description" ) );
            }
            else if ( checkFieldWithDuplicate( parser, "deprecated", null, parsed ) )
            {
                mojoParameter.setDeprecated( interpolatedTrimmed( parser.nextText(), "deprecated" ) );
            }
            else if ( checkFieldWithDuplicate( parser, "since", null, parsed ) )
            {
                mojoParameter.setSince( interpolatedTrimmed( parser.nextText(), "since" ) );
            }
            else if ( checkFieldWithDuplicate( parser, "implementation", null, parsed ) )
            {
                mojoParameter.setImplementation( interpolatedTrimmed( parser.nextText(), "implementation" ) );
            }
            else if ( checkFieldWithDuplicate( parser, "defaultValue", null, parsed ) )
            {
                mojoParameter.setDefaultValue( interpolatedTrimmed( parser.nextText(), "defaultValue" ) );
            }
            else if ( checkFieldWithDuplicate( parser, "expression", null, parsed ) )
            {
                mojoParameter.setExpression( interpolatedTrimmed( parser.nextText(), "expression" ) );
            }
            else
            {
                checkUnknownElement( parser, strict );
            }
        }
        return mojoParameter;
    } //-- MojoParameter parseMojoParameter( XmlPullParser, boolean )

    /**
     * Method parseMojoRequirement.
     * 
     * @param parser
     * @param strict
     * @throws IOException
     * @throws XmlPullParserException
     * @return MojoRequirement
     */
    private MojoRequirement parseMojoRequirement( XmlPullParser parser, boolean strict )
        throws IOException, XmlPullParserException
    {
        String tagName = parser.getName();
        MojoRequirement mojoRequirement = new MojoRequirement();
        for ( int i = parser.getAttributeCount() - 1; i >= 0; i-- )
        {
            String name = parser.getAttributeName( i );
            String value = parser.getAttributeValue( i );

            if ( name.indexOf( ':' ) >= 0 )
            {
                // just ignore attributes with non-default namespace (for example: xmlns:xsi)
            }
            else
            {
                checkUnknownAttribute( parser, name, tagName, strict );
            }
        }
        java.util.Set parsed = new java.util.HashSet();
        while ( ( strict ? parser.nextTag() : nextTag( parser ) ) == XmlPullParser.START_TAG )
        {
            if ( checkFieldWithDuplicate( parser, "fieldName", null, parsed ) )
            {
                mojoRequirement.setFieldName( interpolatedTrimmed( parser.nextText(), "fieldName" ) );
            }
            else if ( checkFieldWithDuplicate( parser, "role", null, parsed ) )
            {
                mojoRequirement.setRole( interpolatedTrimmed( parser.nextText(), "role" ) );
            }
            else if ( checkFieldWithDuplicate( parser, "roleHint", null, parsed ) )
            {
                mojoRequirement.setRoleHint( interpolatedTrimmed( parser.nextText(), "roleHint" ) );
            }
            else
            {
                checkUnknownElement( parser, strict );
            }
        }
        return mojoRequirement;
    } //-- MojoRequirement parseMojoRequirement( XmlPullParser, boolean )

    /**
     * Method parsePluginDependency.
     * 
     * @param parser
     * @param strict
     * @throws IOException
     * @throws XmlPullParserException
     * @return PluginDependency
     */
    private PluginDependency parsePluginDependency( XmlPullParser parser, boolean strict )
        throws IOException, XmlPullParserException
    {
        String tagName = parser.getName();
        PluginDependency pluginDependency = new PluginDependency();
        for ( int i = parser.getAttributeCount() - 1; i >= 0; i-- )
        {
            String name = parser.getAttributeName( i );
            String value = parser.getAttributeValue( i );

            if ( name.indexOf( ':' ) >= 0 )
            {
                // just ignore attributes with non-default namespace (for example: xmlns:xsi)
            }
            else
            {
                checkUnknownAttribute( parser, name, tagName, strict );
            }
        }
        java.util.Set parsed = new java.util.HashSet();
        while ( ( strict ? parser.nextTag() : nextTag( parser ) ) == XmlPullParser.START_TAG )
        {
            if ( checkFieldWithDuplicate( parser, "groupId", null, parsed ) )
            {
                pluginDependency.setGroupId( interpolatedTrimmed( parser.nextText(), "groupId" ) );
            }
            else if ( checkFieldWithDuplicate( parser, "artifactId", null, parsed ) )
            {
                pluginDependency.setArtifactId( interpolatedTrimmed( parser.nextText(), "artifactId" ) );
            }
            else if ( checkFieldWithDuplicate( parser, "version", null, parsed ) )
            {
                pluginDependency.setVersion( interpolatedTrimmed( parser.nextText(), "version" ) );
            }
            else if ( checkFieldWithDuplicate( parser, "type", null, parsed ) )
            {
                pluginDependency.setType( interpolatedTrimmed( parser.nextText(), "type" ) );
            }
            else
            {
                checkUnknownElement( parser, strict );
            }
        }
        return pluginDependency;
    } //-- PluginDependency parsePluginDependency( XmlPullParser, boolean )

    /**
     * Method parsePluginDescriptor.
     * 
     * @param parser
     * @param strict
     * @throws IOException
     * @throws XmlPullParserException
     * @return PluginDescriptor
     */
    private PluginDescriptor parsePluginDescriptor( XmlPullParser parser, boolean strict )
        throws IOException, XmlPullParserException
    {
        String tagName = parser.getName();
        PluginDescriptor pluginDescriptor = new PluginDescriptor();
        for ( int i = parser.getAttributeCount() - 1; i >= 0; i-- )
        {
            String name = parser.getAttributeName( i );
            String value = parser.getAttributeValue( i );

            if ( name.indexOf( ':' ) >= 0 )
            {
                // just ignore attributes with non-default namespace (for example: xmlns:xsi)
            }
            else if ( "xmlns".equals( name ) )
            {
                // ignore xmlns attribute in root class, which is a reserved attribute name
            }
            else
            {
                checkUnknownAttribute( parser, name, tagName, strict );
            }
        }
        java.util.Set parsed = new java.util.HashSet();
        while ( ( strict ? parser.nextTag() : nextTag( parser ) ) == XmlPullParser.START_TAG )
        {
            if ( "mojo".equals( parser.getName() ) )
            {
                java.util.List mojos = pluginDescriptor.getMojos();
                if ( mojos == null )
                {
                    mojos = new java.util.ArrayList/*<MojoDescriptor>*/();
                    pluginDescriptor.setMojos( mojos );
                }
                mojos.add( parseMojoDescriptor( parser, strict ) );
            }
            else
            {
                checkUnknownElement( parser, strict );
            }
        }
        return pluginDescriptor;
    } //-- PluginDescriptor parsePluginDescriptor( XmlPullParser, boolean )

    /**
     * Method read.
     * 
     * @param parser
     * @param strict
     * @throws IOException
     * @throws XmlPullParserException
     * @return PluginDescriptor
     */
    private PluginDescriptor read( XmlPullParser parser, boolean strict )
        throws IOException, XmlPullParserException
    {
        int eventType = parser.getEventType();
        while ( eventType != XmlPullParser.END_DOCUMENT )
        {
            if ( eventType == XmlPullParser.START_TAG )
            {
                if ( strict && ! "mojos".equals( parser.getName() ) )
                {
                    throw new XmlPullParserException( "Expected root element 'mojos' but found '" + parser.getName() + "'", parser, null );
                }
                PluginDescriptor pluginDescriptor = parsePluginDescriptor( parser, strict );
                pluginDescriptor.setModelEncoding( parser.getInputEncoding() );
                return pluginDescriptor;
            }
            eventType = parser.next();
        }
        throw new XmlPullParserException( "Expected root element 'mojos' but found no element at all: invalid XML document", parser, null );
    } //-- PluginDescriptor read( XmlPullParser, boolean )

    /**
     * Sets the state of the "add default entities" flag.
     * 
     * @param addDefaultEntities
     */
    public void setAddDefaultEntities( boolean addDefaultEntities )
    {
        this.addDefaultEntities = addDefaultEntities;
    } //-- void setAddDefaultEntities( boolean )

    public static interface ContentTransformer
{
    /**
     * Interpolate the value read from the xpp3 document
     * @param source The source value
     * @param fieldName A description of the field being interpolated. The implementation may use this to
     *                           log stuff.
     * @return The interpolated value.
     */
    String transform( String source, String fieldName );
}

}
