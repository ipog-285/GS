// =================== DO NOT EDIT THIS FILE ====================
// Generated by Modello 1.8.3,
// any modifications will be overwritten.
// ==============================================================

package io.takari.maven.plugins.plugin.model.io.xpp3;

  //---------------------------------/
 //- Imported classes and packages -/
//---------------------------------/

import io.takari.maven.plugins.plugin.model.MojoDescriptor;
import io.takari.maven.plugins.plugin.model.MojoParameter;
import io.takari.maven.plugins.plugin.model.MojoRequirement;
import io.takari.maven.plugins.plugin.model.PluginDependency;
import io.takari.maven.plugins.plugin.model.PluginDescriptor;
import java.io.OutputStream;
import java.io.Writer;
import java.util.Iterator;
import org.codehaus.plexus.util.xml.pull.MXSerializer;
import org.codehaus.plexus.util.xml.pull.XmlSerializer;

/**
 * Class PluginDescriptorXpp3Writer.
 * 
 * @version $Revision$ $Date$
 */
@SuppressWarnings( "all" )
public class PluginDescriptorXpp3Writer
{

      //--------------------------/
     //- Class/Member Variables -/
    //--------------------------/

    /**
     * Field NAMESPACE.
     */
    private static final String NAMESPACE = null;


      //-----------/
     //- Methods -/
    //-----------/

    /**
     * Method write.
     * 
     * @param writer
     * @param pluginDescriptor
     * @throws java.io.IOException
     */
    public void write( Writer writer, PluginDescriptor pluginDescriptor )
        throws java.io.IOException
    {
        XmlSerializer serializer = new MXSerializer();
        serializer.setProperty( "http://xmlpull.org/v1/doc/properties.html#serializer-indentation", "  " );
        serializer.setProperty( "http://xmlpull.org/v1/doc/properties.html#serializer-line-separator", "\n" );
        serializer.setOutput( writer );
        serializer.startDocument( pluginDescriptor.getModelEncoding(), null );
        writePluginDescriptor( pluginDescriptor, "mojos", serializer );
        serializer.endDocument();
    } //-- void write( Writer, PluginDescriptor )

    /**
     * Method write.
     * 
     * @param stream
     * @param pluginDescriptor
     * @throws java.io.IOException
     */
    public void write( OutputStream stream, PluginDescriptor pluginDescriptor )
        throws java.io.IOException
    {
        XmlSerializer serializer = new MXSerializer();
        serializer.setProperty( "http://xmlpull.org/v1/doc/properties.html#serializer-indentation", "  " );
        serializer.setProperty( "http://xmlpull.org/v1/doc/properties.html#serializer-line-separator", "\n" );
        serializer.setOutput( stream, pluginDescriptor.getModelEncoding() );
        serializer.startDocument( pluginDescriptor.getModelEncoding(), null );
        writePluginDescriptor( pluginDescriptor, "mojos", serializer );
        serializer.endDocument();
    } //-- void write( OutputStream, PluginDescriptor )

    /**
     * Method writeMojoDescriptor.
     * 
     * @param mojoDescriptor
     * @param serializer
     * @param tagName
     * @throws java.io.IOException
     */
    private void writeMojoDescriptor( MojoDescriptor mojoDescriptor, String tagName, XmlSerializer serializer )
        throws java.io.IOException
    {
        serializer.startTag( NAMESPACE, tagName );
        if ( ( mojoDescriptor.getSuperclasses() != null ) && ( mojoDescriptor.getSuperclasses().size() > 0 ) )
        {
            serializer.startTag( NAMESPACE, "superclasses" );
            for ( Iterator iter = mojoDescriptor.getSuperclasses().iterator(); iter.hasNext(); )
            {
                String superclasse = (String) iter.next();
                serializer.startTag( NAMESPACE, "superclasse" ).text( superclasse ).endTag( NAMESPACE, "superclasse" );
            }
            serializer.endTag( NAMESPACE, "superclasses" );
        }
        if ( mojoDescriptor.getGoal() != null )
        {
            serializer.startTag( NAMESPACE, "goal" ).text( mojoDescriptor.getGoal() ).endTag( NAMESPACE, "goal" );
        }
        if ( mojoDescriptor.getDescription() != null )
        {
            serializer.startTag( NAMESPACE, "description" ).text( mojoDescriptor.getDescription() ).endTag( NAMESPACE, "description" );
        }
        if ( mojoDescriptor.getSince() != null )
        {
            serializer.startTag( NAMESPACE, "since" ).text( mojoDescriptor.getSince() ).endTag( NAMESPACE, "since" );
        }
        if ( mojoDescriptor.getRequiresDependencyResolution() != null )
        {
            serializer.startTag( NAMESPACE, "requiresDependencyResolution" ).text( mojoDescriptor.getRequiresDependencyResolution() ).endTag( NAMESPACE, "requiresDependencyResolution" );
        }
        if ( mojoDescriptor.getRequiresDependencyCollection() != null )
        {
            serializer.startTag( NAMESPACE, "requiresDependencyCollection" ).text( mojoDescriptor.getRequiresDependencyCollection() ).endTag( NAMESPACE, "requiresDependencyCollection" );
        }
        if ( mojoDescriptor.isRequiresDirectInvocation() != false )
        {
            serializer.startTag( NAMESPACE, "requiresDirectInvocation" ).text( String.valueOf( mojoDescriptor.isRequiresDirectInvocation() ) ).endTag( NAMESPACE, "requiresDirectInvocation" );
        }
        if ( mojoDescriptor.isRequiresProject() != false )
        {
            serializer.startTag( NAMESPACE, "requiresProject" ).text( String.valueOf( mojoDescriptor.isRequiresProject() ) ).endTag( NAMESPACE, "requiresProject" );
        }
        if ( mojoDescriptor.isRequiresReports() != false )
        {
            serializer.startTag( NAMESPACE, "requiresReports" ).text( String.valueOf( mojoDescriptor.isRequiresReports() ) ).endTag( NAMESPACE, "requiresReports" );
        }
        if ( mojoDescriptor.isAggregator() != false )
        {
            serializer.startTag( NAMESPACE, "aggregator" ).text( String.valueOf( mojoDescriptor.isAggregator() ) ).endTag( NAMESPACE, "aggregator" );
        }
        if ( mojoDescriptor.isRequiresOnline() != false )
        {
            serializer.startTag( NAMESPACE, "requiresOnline" ).text( String.valueOf( mojoDescriptor.isRequiresOnline() ) ).endTag( NAMESPACE, "requiresOnline" );
        }
        if ( mojoDescriptor.isInheritedByDefault() != false )
        {
            serializer.startTag( NAMESPACE, "inheritedByDefault" ).text( String.valueOf( mojoDescriptor.isInheritedByDefault() ) ).endTag( NAMESPACE, "inheritedByDefault" );
        }
        if ( mojoDescriptor.getPhase() != null )
        {
            serializer.startTag( NAMESPACE, "phase" ).text( mojoDescriptor.getPhase() ).endTag( NAMESPACE, "phase" );
        }
        if ( mojoDescriptor.getImplementation() != null )
        {
            serializer.startTag( NAMESPACE, "implementation" ).text( mojoDescriptor.getImplementation() ).endTag( NAMESPACE, "implementation" );
        }
        if ( mojoDescriptor.getLanguage() != null )
        {
            serializer.startTag( NAMESPACE, "language" ).text( mojoDescriptor.getLanguage() ).endTag( NAMESPACE, "language" );
        }
        if ( mojoDescriptor.getConfigurator() != null )
        {
            serializer.startTag( NAMESPACE, "configurator" ).text( mojoDescriptor.getConfigurator() ).endTag( NAMESPACE, "configurator" );
        }
        if ( mojoDescriptor.getInstantiationStrategy() != null )
        {
            serializer.startTag( NAMESPACE, "instantiationStrategy" ).text( mojoDescriptor.getInstantiationStrategy() ).endTag( NAMESPACE, "instantiationStrategy" );
        }
        if ( mojoDescriptor.getExecutionStrategy() != null )
        {
            serializer.startTag( NAMESPACE, "executionStrategy" ).text( mojoDescriptor.getExecutionStrategy() ).endTag( NAMESPACE, "executionStrategy" );
        }
        if ( mojoDescriptor.isThreadSafe() != false )
        {
            serializer.startTag( NAMESPACE, "threadSafe" ).text( String.valueOf( mojoDescriptor.isThreadSafe() ) ).endTag( NAMESPACE, "threadSafe" );
        }
        if ( mojoDescriptor.getDeprecated() != null )
        {
            serializer.startTag( NAMESPACE, "deprecated" ).text( mojoDescriptor.getDeprecated() ).endTag( NAMESPACE, "deprecated" );
        }
        if ( ( mojoDescriptor.getParameters() != null ) && ( mojoDescriptor.getParameters().size() > 0 ) )
        {
            serializer.startTag( NAMESPACE, "parameters" );
            for ( Iterator iter = mojoDescriptor.getParameters().iterator(); iter.hasNext(); )
            {
                MojoParameter o = (MojoParameter) iter.next();
                writeMojoParameter( o, "parameter", serializer );
            }
            serializer.endTag( NAMESPACE, "parameters" );
        }
        if ( ( mojoDescriptor.getRequirements() != null ) && ( mojoDescriptor.getRequirements().size() > 0 ) )
        {
            serializer.startTag( NAMESPACE, "requirements" );
            for ( Iterator iter = mojoDescriptor.getRequirements().iterator(); iter.hasNext(); )
            {
                MojoRequirement o = (MojoRequirement) iter.next();
                writeMojoRequirement( o, "requirement", serializer );
            }
            serializer.endTag( NAMESPACE, "requirements" );
        }
        if ( mojoDescriptor.isTakariBuilder() != false )
        {
            serializer.startTag( NAMESPACE, "takariBuilder" ).text( String.valueOf( mojoDescriptor.isTakariBuilder() ) ).endTag( NAMESPACE, "takariBuilder" );
        }
        serializer.endTag( NAMESPACE, tagName );
    } //-- void writeMojoDescriptor( MojoDescriptor, String, XmlSerializer )

    /**
     * Method writeMojoParameter.
     * 
     * @param mojoParameter
     * @param serializer
     * @param tagName
     * @throws java.io.IOException
     */
    private void writeMojoParameter( MojoParameter mojoParameter, String tagName, XmlSerializer serializer )
        throws java.io.IOException
    {
        serializer.startTag( NAMESPACE, tagName );
        if ( mojoParameter.getName() != null )
        {
            serializer.startTag( NAMESPACE, "name" ).text( mojoParameter.getName() ).endTag( NAMESPACE, "name" );
        }
        if ( mojoParameter.getAlias() != null )
        {
            serializer.startTag( NAMESPACE, "alias" ).text( mojoParameter.getAlias() ).endTag( NAMESPACE, "alias" );
        }
        if ( mojoParameter.getType() != null )
        {
            serializer.startTag( NAMESPACE, "type" ).text( mojoParameter.getType() ).endTag( NAMESPACE, "type" );
        }
        if ( mojoParameter.isRequired() != false )
        {
            serializer.startTag( NAMESPACE, "required" ).text( String.valueOf( mojoParameter.isRequired() ) ).endTag( NAMESPACE, "required" );
        }
        if ( mojoParameter.isEditable() != false )
        {
            serializer.startTag( NAMESPACE, "editable" ).text( String.valueOf( mojoParameter.isEditable() ) ).endTag( NAMESPACE, "editable" );
        }
        if ( mojoParameter.getDescription() != null )
        {
            serializer.startTag( NAMESPACE, "description" ).text( mojoParameter.getDescription() ).endTag( NAMESPACE, "description" );
        }
        if ( mojoParameter.getDeprecated() != null )
        {
            serializer.startTag( NAMESPACE, "deprecated" ).text( mojoParameter.getDeprecated() ).endTag( NAMESPACE, "deprecated" );
        }
        if ( mojoParameter.getSince() != null )
        {
            serializer.startTag( NAMESPACE, "since" ).text( mojoParameter.getSince() ).endTag( NAMESPACE, "since" );
        }
        if ( mojoParameter.getImplementation() != null )
        {
            serializer.startTag( NAMESPACE, "implementation" ).text( mojoParameter.getImplementation() ).endTag( NAMESPACE, "implementation" );
        }
        if ( mojoParameter.getDefaultValue() != null )
        {
            serializer.startTag( NAMESPACE, "defaultValue" ).text( mojoParameter.getDefaultValue() ).endTag( NAMESPACE, "defaultValue" );
        }
        if ( mojoParameter.getExpression() != null )
        {
            serializer.startTag( NAMESPACE, "expression" ).text( mojoParameter.getExpression() ).endTag( NAMESPACE, "expression" );
        }
        serializer.endTag( NAMESPACE, tagName );
    } //-- void writeMojoParameter( MojoParameter, String, XmlSerializer )

    /**
     * Method writeMojoRequirement.
     * 
     * @param mojoRequirement
     * @param serializer
     * @param tagName
     * @throws java.io.IOException
     */
    private void writeMojoRequirement( MojoRequirement mojoRequirement, String tagName, XmlSerializer serializer )
        throws java.io.IOException
    {
        serializer.startTag( NAMESPACE, tagName );
        if ( mojoRequirement.getFieldName() != null )
        {
            serializer.startTag( NAMESPACE, "fieldName" ).text( mojoRequirement.getFieldName() ).endTag( NAMESPACE, "fieldName" );
        }
        if ( mojoRequirement.getRole() != null )
        {
            serializer.startTag( NAMESPACE, "role" ).text( mojoRequirement.getRole() ).endTag( NAMESPACE, "role" );
        }
        if ( mojoRequirement.getRoleHint() != null )
        {
            serializer.startTag( NAMESPACE, "roleHint" ).text( mojoRequirement.getRoleHint() ).endTag( NAMESPACE, "roleHint" );
        }
        serializer.endTag( NAMESPACE, tagName );
    } //-- void writeMojoRequirement( MojoRequirement, String, XmlSerializer )

    /**
     * Method writePluginDependency.
     * 
     * @param pluginDependency
     * @param serializer
     * @param tagName
     * @throws java.io.IOException
     */
    private void writePluginDependency( PluginDependency pluginDependency, String tagName, XmlSerializer serializer )
        throws java.io.IOException
    {
        serializer.startTag( NAMESPACE, tagName );
        if ( pluginDependency.getGroupId() != null )
        {
            serializer.startTag( NAMESPACE, "groupId" ).text( pluginDependency.getGroupId() ).endTag( NAMESPACE, "groupId" );
        }
        if ( pluginDependency.getArtifactId() != null )
        {
            serializer.startTag( NAMESPACE, "artifactId" ).text( pluginDependency.getArtifactId() ).endTag( NAMESPACE, "artifactId" );
        }
        if ( pluginDependency.getVersion() != null )
        {
            serializer.startTag( NAMESPACE, "version" ).text( pluginDependency.getVersion() ).endTag( NAMESPACE, "version" );
        }
        if ( pluginDependency.getType() != null )
        {
            serializer.startTag( NAMESPACE, "type" ).text( pluginDependency.getType() ).endTag( NAMESPACE, "type" );
        }
        serializer.endTag( NAMESPACE, tagName );
    } //-- void writePluginDependency( PluginDependency, String, XmlSerializer )

    /**
     * Method writePluginDescriptor.
     * 
     * @param pluginDescriptor
     * @param serializer
     * @param tagName
     * @throws java.io.IOException
     */
    private void writePluginDescriptor( PluginDescriptor pluginDescriptor, String tagName, XmlSerializer serializer )
        throws java.io.IOException
    {
        serializer.startTag( NAMESPACE, tagName );
        if ( ( pluginDescriptor.getMojos() != null ) && ( pluginDescriptor.getMojos().size() > 0 ) )
        {
            for ( Iterator iter = pluginDescriptor.getMojos().iterator(); iter.hasNext(); )
            {
                MojoDescriptor o = (MojoDescriptor) iter.next();
                writeMojoDescriptor( o, "mojo", serializer );
            }
        }
        serializer.endTag( NAMESPACE, tagName );
    } //-- void writePluginDescriptor( PluginDescriptor, String, XmlSerializer )

}
